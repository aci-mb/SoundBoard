<Window
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
    xmlns:Converters="clr-namespace:SoundBoard.ViewModel.Converters"
	xmlns:helpers="clr-namespace:SoundBoard.Helpers"
	xmlns:p="clr-namespace:SoundBoard.Properties"
	xmlns:xctk="http://schemas.xceed.com/wpf/xaml/toolkit"
    xmlns:dragDrop="clr-namespace:GongSolutions.Wpf.DragDrop;assembly=GongSolutions.Wpf.DragDrop"
	xmlns:viewModel="clr-namespace:SoundBoard.ViewModel"
    xmlns:resx="clr-namespace:SoundBoard.Properties"
    xmlns:System="clr-namespace:System;assembly=mscorlib"
    x:Name="window"
    mc:Ignorable="d" x:Class="SoundBoard.View.MainWindow"
	Title="Acillatem Sound Board"
	Height="450.042"
	Width="{Binding Width, Mode=TwoWay, Source={x:Static resx:Settings.Default}}"
	MinWidth="600"
	MinHeight="250"
	Icon="Radvisual-Holographic-My-music.ico"
    WindowStartupLocation="CenterScreen">
    <Window.Resources>
        <ResourceDictionary>
        	<helpers:TimeSpanToDoubleSecondsConverter x:Key="TimeSpanToDoubleSecondsConverter"/>
			<Style x:Key="ListViewItem" TargetType="{x:Type ListViewItem}" BasedOn="{StaticResource {x:Type ListViewItem}}">
				<Setter Property="Height" Value="32"/>
			</Style>
			<helpers:DoubleToGridLengthConverter x:Key="DoubleToGridLengthConverter"/>
            <viewModel:MainWindowViewModel x:Key="MainWindowViewModelDataSource" d:IsDataSource="True"/>
            <Converters:TimeSpanToVisibilityConverter x:Key="TimeSpanToVisibilityConverter"/>
        	<BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>
        	<Converters:BooleanToOpacityConverter x:Key="BooleanToOpacityConverter"/>
            <DataTemplate x:Key="SoundBoardTemplate">
            	<StackPanel>
            		<TextBlock Text="{Binding Name}" />
            	</StackPanel>
            </DataTemplate>
			<DataTemplate x:Key="SoundColumnNameTemplate">
				<DockPanel>
					<Image VerticalAlignment="Center" Height="24" Width="24" Source="appbar.warning.circle.png" ToolTip="{Binding ErrorInfo.ErrorMessage}" Stretch="Fill" Visibility="{Binding ErrorInfo.HasError, Converter={StaticResource BooleanToVisibilityConverter}}">
						<Image.Effect>
							<DropShadowEffect/>
						</Image.Effect>
					</Image>

					<Label x:Name="textBlock" Content="{Binding Name}" ToolTip="{Binding FileName}">
						<i:Interaction.Triggers>
							<i:EventTrigger EventName="MouseDoubleClick">
								<i:InvokeCommandAction Command="{Binding Commands.ActivateSingleSoundCommand, Mode=OneWay, Source={StaticResource MainWindowViewModelDataSource}}" CommandParameter="{Binding DataContext, ElementName=textBlock}"/>
							</i:EventTrigger>
						</i:Interaction.Triggers>
					</Label>
				</DockPanel>
			</DataTemplate>
            <DataTemplate x:Key="ActiveSoundColumnNameTemplate">
                <DockPanel>
                    <Image Source="appbar.clock.png" Height="17" Width="17"  Visibility="{Binding Delay, Converter={StaticResource TimeSpanToVisibilityConverter}}" />
					<Label x:Name="Delay" Grid.Column="1" Content="{Binding Delay.TotalSeconds}" Visibility="{Binding Delay, Converter={StaticResource TimeSpanToVisibilityConverter}}" VerticalAlignment="Center" VerticalContentAlignment="Center" Margin="0,0,10,0" ContentStringFormat="s" />
                    <Label x:Name="textBlock" Content="{Binding Name}" ToolTip="{Binding FileName}">
                        <i:Interaction.Triggers>
                            <i:EventTrigger EventName="MouseDoubleClick">
                                <i:InvokeCommandAction Command="{Binding Commands.DeactivateSingleSoundCommand, Mode=OneWay, Source={StaticResource MainWindowViewModelDataSource}}" CommandParameter="{Binding DataContext, ElementName=textBlock}"/>
                            </i:EventTrigger>
                        </i:Interaction.Triggers>
                    </Label>
                </DockPanel>
            </DataTemplate>
            <System:Double x:Key="IsLoopedColumnWidth">NaN</System:Double>
			<DataTemplate x:Key="SoundColumnIsLoopedTemplate">
				<CheckBox HorizontalAlignment="Center" IsChecked="{Binding IsLooped, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
			</DataTemplate>

			<DataTemplate x:Key="SoundColumnVolumeTemplate">
				<Slider x:Name="slider" Width="75"
					Value="{Binding VolumeInPercent, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
					AutoToolTipPlacement="BottomRight" Maximum="100" LargeChange="10" SmallChange="1"
					VerticalAlignment="Center" ToolTip="Volume" />
			</DataTemplate>

			<DataTemplate x:Key="SoundColumnDelayTemplate">
                <xctk:DoubleUpDown Minimum="0" Value="{Binding Delay, Converter={StaticResource TimeSpanToDoubleSecondsConverter}, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" IsManipulationEnabled="True" ParsingNumberStyle="AllowDecimalPoint" Background="Transparent" BorderBrush="{DynamicResource NormalBorderBrush}" Foreground="{DynamicResource TextBrush}"/>
			</DataTemplate>
			<DataTemplate x:Key="ActiveSoundTemplate">
				<Grid>
					<Grid.ColumnDefinitions>
						<ColumnDefinition Width="Auto" />
						<ColumnDefinition Width="Auto" />
						<ColumnDefinition Width="250" />
						<ColumnDefinition Width="100" />
						<ColumnDefinition Width="100" />
					</Grid.ColumnDefinitions>
					<Image Height="24" Width="24" Source="appbar.clock.png" Visibility="{Binding Delay, Converter={StaticResource TimeSpanToVisibilityConverter}}">
						<Image.Effect>
							<DropShadowEffect/>
						</Image.Effect>
					</Image>
					<Label x:Name="Delay" Grid.Column="1" Content="{Binding Delay}" Visibility="{Binding Delay, Converter={StaticResource TimeSpanToVisibilityConverter}}" VerticalAlignment="Center" VerticalContentAlignment="Center" Margin="0,0,10,0" />
					<Label x:Name="Name" Content="{Binding Name}" ToolTip="{Binding FileName}" VerticalAlignment="Center" Focusable="True" Grid.Column="2" >
						<i:Interaction.Triggers>
							<i:EventTrigger EventName="MouseDoubleClick">
								<i:InvokeCommandAction Command="{Binding Commands.DeactivateSingleSoundCommand, Mode=OneWay, Source={StaticResource MainWindowViewModelDataSource}}" CommandParameter="{Binding DataContext, ElementName=Name}"/>
							</i:EventTrigger>
						</i:Interaction.Triggers>
					</Label>
					<Image x:Name="IsLooped" Height="24" Width="24" Grid.Column="3" OpacityMask="Black" Source="appbar.loop.png">
						<Image.Style>
							<Style>
								<Style.Triggers>
									<DataTrigger Binding="{Binding IsLooped}" Value="True">
										<Setter Property="UIElement.Effect">
											<Setter.Value>
												<DropShadowEffect Color="Blue" ShadowDepth="0" />
											</Setter.Value>
										</Setter>
									</DataTrigger>
									
								</Style.Triggers>
							</Style>
						</Image.Style>
						<i:Interaction.Triggers>
							<i:EventTrigger EventName="MouseLeftButtonUp">
								<i:InvokeCommandAction Command="{Binding Commands.ToggleSoundIsLoopedCommand, Mode=OneWay, Source={StaticResource MainWindowViewModelDataSource}}" CommandParameter="{Binding DataContext, ElementName=IsLooped}"/>
							</i:EventTrigger>
						</i:Interaction.Triggers>
					</Image>
					<Slider x:Name="Volume"
						Value="{Binding VolumeInPercent, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
						AutoToolTipPlacement="BottomRight" Maximum="100" LargeChange="10" SmallChange="1"
						Grid.Column="4" VerticalAlignment="Center" ToolTip="Volume" />
				</Grid>
            </DataTemplate>
            <helpers:ListViewStretchedColumnWidthConverter x:Key="ListViewActualWidthToRemainingColumnWidthConverter" />
        </ResourceDictionary>
    </Window.Resources>
	<i:Interaction.Triggers>
		<i:EventTrigger EventName="Closing">
			<i:InvokeCommandAction Command="{Binding Commands.ShutdownAppCommand, Mode=OneWay, Source={StaticResource MainWindowViewModelDataSource}}"/>
		</i:EventTrigger>
	</i:Interaction.Triggers>
	<Grid x:Name="WindowGrid" DataContext="{Binding Source={StaticResource MainWindowViewModelDataSource}}">
		<Grid.RowDefinitions>
			<RowDefinition Height="{Binding SoundBoardSoundsHeight, Converter={StaticResource DoubleToGridLengthConverter}, Mode=TwoWay, Source={x:Static resx:Settings.Default}, UpdateSourceTrigger=PropertyChanged}" />
			<RowDefinition Height="10"/>
			<RowDefinition />
		</Grid.RowDefinitions>
		<GroupBox x:Name="gbSoundBoards"
			Grid.ColumnSpan="2" Grid.Row="0">
			<GroupBox.Header>
				<TextBlock Text="{x:Static resx:Resources.gbSoundBoards_Header}"/>
			</GroupBox.Header>
			<Grid x:Name="SoundBoardGrid">
				<Grid.RowDefinitions>
					<RowDefinition Height="Auto" />
					<RowDefinition />
				</Grid.RowDefinitions>
				<Grid.ColumnDefinitions>
					<ColumnDefinition Width="100" />
					<ColumnDefinition />
				</Grid.ColumnDefinitions>
				<DockPanel Grid.ColumnSpan="2">
					<Button DockPanel.Dock="Right" x:Name="btnRemoveSoundBoard" ToolTip="{x:Static resx:Resources.btnRemoveSoundBoard_ToolTip}"
						Command="{Binding Commands.RemoveSoundBoardCommand, Mode=OneWay}" Margin="5,0,0,0"
						Width="24" Height="24" >
						<Button.Background>
							<ImageBrush ImageSource="appbar.minus.png"/>
						</Button.Background>
					</Button>
					<Button DockPanel.Dock="Right" x:Name="btnAddSoundBoard" ToolTip="{x:Static resx:Resources.btnAddSoundBoard_ToolTip}"
						Command="{Binding Commands.AddSoundBoardCommand, Mode=OneWay}" Margin="5,0,0,0" Width="24" Height="24" >
						<Button.Background>
							<ImageBrush ImageSource="appbar.add.png"/>
						</Button.Background>
					</Button>
					<ComboBox SelectedIndex="1" ItemTemplate="{DynamicResource SoundBoardTemplate}"
						ItemsSource="{Binding SoundBoards}"
						SelectedItem="{Binding SelectedSoundBoard, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
						x:Name="cbSelectedSoundBoard" ToolTip="{x:Static resx:Resources.cbSelectedSoundBoard_ToolTip}" />
				</DockPanel>
				<GroupBox VerticalContentAlignment="Stretch" Grid.Row="1" Grid.ColumnSpan="2" Grid.Column="0"
					x:Name="gbSounds" Header="{x:Static resx:Resources.gbSounds_Header}"  ScrollViewer.VerticalScrollBarVisibility="Auto">
					<Grid x:Name="SoundsGrid">
						<Grid.ColumnDefinitions>
							<ColumnDefinition />
							<ColumnDefinition Width="Auto" />
						</Grid.ColumnDefinitions>
						<StackPanel Grid.Column="1" HorizontalAlignment="Left">
							<Button x:Name="btnAddSoundsToSoundBoard" ToolTip="{x:Static resx:Resources.btnAddSoundsToSoundBoard_ToolTip}" Width="24" Command="{Binding Commands.AddSoundCommand, Mode=OneWay}" Height="24" >
								<Button.Background>
									<ImageBrush ImageSource="appbar.add.multiple.png"/>
								</Button.Background>
							</Button>
						</StackPanel>
						<ListView x:Name="ListView" Grid.Column="0" ItemsSource="{Binding SelectedSoundBoard.Sounds}"
							SelectedItem="{Binding SelectedSound, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
							Height="{Binding ActualHeight, ElementName=SoundsGrid, Mode=OneWay}"
							SelectionMode="Extended"
							dragDrop:DragDrop.IsDragSource="True"
							dragDrop:DragDrop.DropHandler="{Binding}"
							dragDrop:DragDrop.IsDropTarget="True"
							ItemContainerStyle="{DynamicResource ListViewItemStyle}" ScrollViewer.HorizontalScrollBarVisibility="Disabled">
							<ListView.Resources>
								<Style x:Key="ListViewItemStyle" TargetType="{x:Type ListViewItem}" BasedOn="{StaticResource {x:Type ListViewItem}}">
									<Setter Property="HorizontalContentAlignment" Value="Stretch"/>
								</Style>
							</ListView.Resources>
							<ListView.View>
								<GridView AllowsColumnReorder="False">
									<GridViewColumn x:Name="lvColumnName" Header="{x:Static resx:Resources.lvColumnName_Header}" CellTemplate="{StaticResource SoundColumnNameTemplate}">
                                        <GridViewColumn.Width>
                                            <MultiBinding Converter="{StaticResource ListViewActualWidthToRemainingColumnWidthConverter}">
                                                <Binding Path="ActualWidth" RelativeSource="{RelativeSource Mode=FindAncestor, AncestorType=ListView}"/>
                                                <Binding RelativeSource="{RelativeSource Mode=FindAncestor, AncestorType=ListView}"/>
                                                <Binding ElementName="lvColumnName"/>
                                            </MultiBinding>
                                        </GridViewColumn.Width>
                                    </GridViewColumn>
								    <GridViewColumn x:Name="lvColumnIsLooped" Header="{x:Static resx:Resources.lvColumnIsLooped_Header}" CellTemplate="{DynamicResource SoundColumnIsLoopedTemplate}"/>
									<GridViewColumn x:Name="lvColumnVolume" Header="{x:Static resx:Resources.lvColumnVolume_Header}" CellTemplate="{DynamicResource SoundColumnVolumeTemplate}" Width="100"/>
									<GridViewColumn x:Name="lvColumnDelay" Header="{x:Static resx:Resources.lvColumnDelay_Header}" CellTemplate="{DynamicResource SoundColumnDelayTemplate}"/>
								</GridView>
							</ListView.View>
							<ListView.ContextMenu>
								<Binding Mode="OneWay">
									<Binding.Source>
										<ContextMenu ItemsSource="{Binding SoundContextMenuCommands.Commands, Source={StaticResource MainWindowViewModelDataSource}}">
											<ContextMenu.ItemContainerStyle>
												<Style TargetType="{x:Type MenuItem}">
													<Setter Property="CommandParameter" Value="{Binding PlacementTarget.SelectedItems, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ContextMenu}}}" />
													<Setter Property="Command" Value="{Binding Command}" />
													<Setter Property="Header" Value="{Binding Name}" />
													<Setter Property="Icon" Value="{Binding Icon}" />
												</Style>
											</ContextMenu.ItemContainerStyle>
										</ContextMenu>
									</Binding.Source>
								</Binding>
							</ListView.ContextMenu>
						</ListView>
					</Grid>
				</GroupBox>
			</Grid>
		</GroupBox>
		<GridSplitter HorizontalAlignment="Stretch" Grid.Row="1" BorderThickness="0,1">
			<GridSplitter.BorderBrush>
				<SolidColorBrush Color="{DynamicResource WhiteColor}"/>
			</GridSplitter.BorderBrush>
            <GridSplitter.Style>
                <Style TargetType="GridSplitter">
                    <Setter Property="Background">
                        <Setter.Value>
                            <SolidColorBrush Color="{DynamicResource HoverColor}"/>
                        </Setter.Value>
                    </Setter>
                    <Style.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background">
                                <Setter.Value>
                                    <LinearGradientBrush EndPoint="1,0" MappingMode="RelativeToBoundingBox" StartPoint="0,0">
                                        <GradientStop Color="{DynamicResource HoverColor}" Offset="0"/>
                                        <GradientStop Color="{DynamicResource TopGradientHoverColor}" Offset="0.5"/>
                                        <GradientStop Color="{DynamicResource HoverColor}" Offset="1"/>
                                    </LinearGradientBrush>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsDragging" Value="True">
                            <Setter Property="Background">
                                <Setter.Value>
                                    <LinearGradientBrush EndPoint="1,0" MappingMode="RelativeToBoundingBox" StartPoint="0,0">
                                        <GradientStop Color="{DynamicResource HoverColor}" Offset="0"/>
                                        <GradientStop Color="{DynamicResource TopGradientSelectColor}" Offset="0.5"/>
                                        <GradientStop Color="{DynamicResource HoverColor}" Offset="1"/>
                                    </LinearGradientBrush>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                    </Style.Triggers>
                </Style>
            </GridSplitter.Style>
        </GridSplitter>
		<GroupBox Header="{x:Static resx:Resources.gbActiveSounds_Header}" Grid.Row="2">
			<Grid x:Name="ActiveSoundsGrid">
                <ListView x:Name="ActiveSoundsListView" Grid.Column="0" ItemsSource="{Binding SoundService.ActiveSounds}"
							SelectedItem="{Binding SelectedActiveSound, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
							SelectionMode="Extended"
							dragDrop:DragDrop.DropHandler="{Binding}"
					dragDrop:DragDrop.IsDropTarget="True"
					 ItemContainerStyle="{DynamicResource ListViewItemStyle}" ScrollViewer.HorizontalScrollBarVisibility="Disabled">
                    <ListView.Resources>
                        <Style x:Key="ListViewItemStyle" TargetType="{x:Type ListViewItem}" BasedOn="{StaticResource {x:Type ListViewItem}}">
                            <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
                        </Style>
                    </ListView.Resources>
                    <ListView.View>
                        <GridView>
                            <GridViewColumn x:Name="lvActiveSoundsColumnName" Header="{x:Static resx:Resources.lvColumnName_Header}" CellTemplate="{StaticResource ActiveSoundColumnNameTemplate}">
                                <GridViewColumn.Width>
                                    <MultiBinding Converter="{StaticResource ListViewActualWidthToRemainingColumnWidthConverter}">
                                        <Binding Path="ActualWidth" RelativeSource="{RelativeSource Mode=FindAncestor, AncestorType=ListView}"/>
                                        <Binding RelativeSource="{RelativeSource Mode=FindAncestor, AncestorType=ListView}"/>
                                        <Binding ElementName="lvActiveSoundsColumnName"/>
                                    </MultiBinding>
                                </GridViewColumn.Width>
                            </GridViewColumn>
                            <GridViewColumn x:Name="lvActiveSoundsColumnIsLooped" Header="{x:Static resx:Resources.lvColumnIsLooped_Header}" CellTemplate="{DynamicResource SoundColumnIsLoopedTemplate}"/>
                            <GridViewColumn x:Name="lvActiveSoundsColumnVolume" Header="{x:Static resx:Resources.lvColumnVolume_Header}" CellTemplate="{DynamicResource SoundColumnVolumeTemplate}" Width="100"/>
                        </GridView>
                    </ListView.View>
                    <ListView.ContextMenu>
                        <Binding Mode="OneWay">
                            <Binding.Source>
                                <ContextMenu ItemsSource="{Binding ActiveSoundContextMenuCommands.Commands, Source={StaticResource MainWindowViewModelDataSource}}">
                                    <ContextMenu.ItemContainerStyle>
                                        <Style TargetType="{x:Type MenuItem}">
                                            <Setter Property="CommandParameter" Value="{Binding PlacementTarget.SelectedItems, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ContextMenu}}}" />
                                            <Setter Property="Command" Value="{Binding Command}" />
                                            <Setter Property="Header" Value="{Binding Name}" />
                                            <Setter Property="Icon" Value="{Binding Icon}" />
                                        </Style>
                                    </ContextMenu.ItemContainerStyle>
                                </ContextMenu>
                            </Binding.Source>
                        </Binding>
                    </ListView.ContextMenu>
                </ListView>
			</Grid>
		</GroupBox>
	</Grid>
</Window>